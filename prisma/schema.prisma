generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model user {
  idUser   String   @id @default(uuid())
  email    String   @unique
  password String
  role     String
  student  student?
  teacher  teacher?
  clerk    clerk?
}

model student {
  idStudent          String               @id @default(uuid())
  nameStudent        String
  noICStudent        String               @unique
  dateOfBirth        String
  noPhoneStudent     String
  form               Int
  address            String
  nameParent         String
  noICParent         String
  noPhoneParent      String
  isRegistered       Boolean
  createdAt          String
  user               user                 @relation(fields: [idUser], references: [idUser])
  idUser             String               @unique
  student_Subject    student_subject[]
  tuitionFee         tuitionfee[]
  student_Attendance student_attendance[]
}

model subject {
  idSubject       String            @id @default(uuid())
  name            String
  time            String
  day             String
  fee             Int
  teacher         teacher?          @relation(fields: [idTeacher], references: [idTeacher])
  idTeacher       String?
  student_Subject student_subject[]
  attendance      attendance[]
}

model student_subject {
  idStudentSubject String  @id @default(uuid())
  subject          subject @relation(fields: [idSubject], references: [idSubject])
  idSubject        String
  student          student @relation(fields: [idStudent], references: [idStudent])
  idStudent        String
  createdAt        String
}

model teacher {
  idTeacher      String    @id @default(uuid())
  user           user      @relation(fields: [idUser], references: [idUser])
  idUser         String    @unique
  nameTeacher    String
  noICTeacher    String
  ageTeacher     Int
  noPhoneTeacher String
  addressTeacher String
  createdAt      String
  subjects       subject[]
}

model clerk {
  idClerk String @id @default(uuid())
  user    user   @relation(fields: [idUser], references: [idUser])
  idUser  String @unique
}

model tuitionfee {
  idTuitionFee        String          @id @default(uuid())
  student             student         @relation(fields: [idStudent], references: [idStudent])
  idStudent           String
  subjectsList        String
  month               Int
  year                Int
  amount              Int
  statusPayment       String
  paymentMethod       String?
  createdAt           String
  cashTransactionDate String?
  paymentGateway      paymentgateway?
  receiptBank         receiptbank?
}

model paymentgateway {
  paymentGatewayId String     @id @default(uuid())
  transactionBill  String?
  billCode         String
  transactionDate  String?
  tuitionFee       tuitionfee @relation(fields: [idTuitionFee], references: [idTuitionFee])
  idTuitionFee     String     @unique
}

model receiptbank {
  receiptBankId String     @id @default(uuid())
  filePath      String
  fileName      String
  createdAt     String
  tuitionFee    tuitionfee @relation(fields: [idTuitionFee], references: [idTuitionFee])
  idTuitionFee  String     @unique
}

model attendance {
  idAttendance       String               @id @default(uuid())
  date               String
  time               String
  student_Attendance student_attendance[]
  subject            subject              @relation(fields: [idSubject], references: [idSubject])
  idSubject          String
}

model student_attendance {
  idStudentAttendance String     @id @default(uuid())
  attendance          attendance @relation(fields: [idAttendance], references: [idAttendance])
  idAttendance        String
  student             student    @relation(fields: [idStudent], references: [idStudent])
  idStudent           String
  isAttend            Boolean
  createdAt           String
}
